{
  "clipboard_manager": {
    "tasks": [
      {
        "id": "cm-setup-001",
        "name": "Add HotKey Swift Package dependency",
        "description": "Integrate the open-source HotKey package via Swift Package Manager to enable global shortcut registration.",
        "file": "ClipAI.xcodeproj / Package.swift (SPM UI)",
        "status": "completed"
      },
      {
        "id": "cm-setup-002",
        "name": "Create menu-bar status item",
        "description": "Add NSStatusItem in ClipAIApp to keep the app running in the menu bar and provide quick quit/about actions.",
        "file": "ClipAI/ClipAIApp.swift",
        "status": "completed"
      },
      {
        "id": "cm-store-001",
        "name": "Create ClipItem model",
        "description": "Define ClipItem struct with id, content, timestamp conforming to Identifiable & Codable.",
        "file": "ClipAI/Model/ClipItem.swift",
        "status": "completed"
      },
      {
        "id": "cm-store-002",
        "name": "Implement ClipboardStore",
        "description": "Build ObservableObject ClipboardStore managing up to 100 ClipItems with @Published items array.",
        "file": "ClipAI/Model/ClipboardStore.swift",
        "status": "completed"
      },
      {
        "id": "cm-store-003",
        "name": "Add JSON persistence to ClipboardStore",
        "description": "Save list to ~/Library/Application Support/ClipAI/clipboard_history.json using async/await file IO; load on init.",
        "file": "ClipAI/Model/ClipboardStore.swift",
        "status": "completed"
      },
      {
        "id": "cm-store-004",
        "name": "Unit tests for ClipboardStore",
        "description": "Write XCTest cases covering insertion, overflow trimming, and persistence round-trip.",
        "file": "ClipAITests/ClipboardStoreTests.swift",
        "status": "completed"
      },
      {
        "id": "cm-monitor-001",
        "name": "Implement PasteboardMonitor",
        "description": "Create service that polls NSPasteboard.changeCount using Swift concurrency Timer or listens for notification; emits new text items.",
        "file": "ClipAI/Services/PasteboardMonitor.swift",
        "status": "completed"
      },
      {
        "id": "cm-monitor-002",
        "name": "Connect PasteboardMonitor to ClipboardStore",
        "description": "Inject monitor into ClipboardStore so new clipboard text is automatically stored.",
        "file": "ClipAI/Model/ClipboardStore.swift",
        "status": "completed"
      },
      {
        "id": "cm-popup-001",
        "name": "Create ClipItemRowView",
        "description": "SwiftUI view showing a single clipboard snippet (first 80 characters, monospaced, line-clamped).",
        "file": "ClipAI/Views/ClipItemRowView.swift",
        "status": "completed"
      },
      {
        "id": "cm-popup-002",
        "name": "Build PopupView list UI",
        "description": "SwiftUI view containing List/ScrollView of ClipItemRowView bound to ClipboardStore items; shows placeholder when empty.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "completed"
      },
      {
        "id": "cm-popup-003",
        "name": "Implement PopupController window",
        "description": "Create NSWindowController hosting PopupView; borderless, positions near cursor, closes on focus loss.",
        "file": "ClipAI/Controllers/PopupController.swift",
        "status": "completed"
      },
      {
        "id": "cm-hotkey-001",
        "name": "Register ⌃⌘V hotkey",
        "description": "Use HotKey to register global hotkey; on trigger, toggle PopupController visibility.",
        "file": "ClipAI/Services/HotKeyListener.swift",
        "status": "completed"
      },
      {
        "id": "cm-keyboard-001",
        "name": "Add keyboard navigation in PopupView",
        "description": "Support ↑/↓ arrow navigation and Enter to copy selected snippet using SwiftUI FocusState or custom key handling.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "completed"
      },
      {
        "id": "cm-polish-001",
        "name": "Empty state and UI polish",
        "description": "Show \"No text copied yet\" placeholder; apply subtle animations and theming.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "completed"
      },
      {
        "id": "cm-polish-002",
        "name": "Code signing & notarisation setup",
        "description": "Configure project for Developer ID signing and notarise build for distribution.",
        "file": "Xcode project settings",
        "status": "pending"
      }
    ],
    "current_task": null,
    "last_updated": "2025-01-23T15:30:00Z"
  },
  "clipboard_refactor": {
    "tasks": [
      {
        "id": "cr-phase1-001",
        "name": "Create ClipboardInfo class foundation",
        "description": "Create new ClipboardInfo.swift file with @Observable class, basic @Published properties (items, searchText), initialization with storage and monitor dependencies.",
        "file": "ClipAI/Model/ClipboardInfo.swift",
        "status": "completed"
      },
      {
        "id": "cr-phase1-002", 
        "name": "Implement ClipboardInfo core operations",
        "description": "Add addItem, removeItem, clearAll, startMonitoring, stopMonitoring methods with async storage operations and duplicate detection.",
        "file": "ClipAI/Model/ClipboardInfo.swift",
        "status": "completed"
      },
      {
        "id": "cr-phase1-003",
        "name": "Implement PasteboardMonitorDelegate in ClipboardInfo",
        "description": "Add PasteboardMonitorDelegate conformance and pasteboardMonitor:didDetectNewContent: method to handle clipboard changes.",
        "file": "ClipAI/Model/ClipboardInfo.swift", 
        "status": "completed"
      },
      {
        "id": "cr-phase1-004",
        "name": "Add async storage operations to ClipboardInfo",
        "description": "Implement private loadItems() and saveItems() async methods using existing storage protocol, with proper error handling and loading state.",
        "file": "ClipAI/Model/ClipboardInfo.swift",
        "status": "completed"
      },
      {
        "id": "cr-phase2-001",
        "name": "Update PopupView to use @StateObject ClipboardInfo",
        "description": "Replace @ObservedObject store and viewModel with @StateObject clipboardInfo, update state management to use ClipboardInfo directly.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase2-002", 
        "name": "Implement local UI state in PopupView",
        "description": "Move selectedItemId to @State in PopupView, keep @FocusState and other UI-specific state local to the view.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase2-003",
        "name": "Add filteredItems computed property to PopupView",
        "description": "Create computed property that filters clipboardInfo.items based on clipboardInfo.searchText, removing this logic from ViewModel.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase2-004",
        "name": "Update PopupView body to use ClipboardInfo",
        "description": "Bind HeaderView to clipboardInfo.items.count, SearchBarView to clipboardInfo.searchText, and ClipboardListView to filteredItems.",
        "file": "ClipAI/Views/PopupView.swift", 
        "status": "pending"
      },
      {
        "id": "cr-phase2-005",
        "name": "Add PopupView helper methods for selection management",
        "description": "Implement selectFirstItemIfNeeded(), validateSelection(), and copyItemToClipboard() methods as private view helpers.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase3-001",
        "name": "Update ClipboardListView to remove viewModel dependency",
        "description": "Remove viewModel parameter and update ClipboardListView to work directly with items array and selectedItemId binding.",
        "file": "ClipAI/Views/ClipboardListView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase3-002",
        "name": "Update HeaderView to receive item count parameter",
        "description": "Simplify HeaderView to receive itemCount as parameter instead of entire store, making it a pure view without business logic.",
        "file": "ClipAI/Views/HeaderView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase3-003",
        "name": "Update other child views if needed",
        "description": "Review and update EmptyStateView, ClipItemRowView, SearchBarView to ensure compatibility with new architecture.",
        "file": "ClipAI/Views/*.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase4-001",
        "name": "Update PopupController for simplified architecture",
        "description": "Remove clipboardStore dependency from PopupController since PopupView now manages its own ClipboardInfo via @StateObject.",
        "file": "ClipAI/Controllers/PopupController.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase4-002",
        "name": "Update ClipAIApp entry point",
        "description": "Remove clipboardStore property from App class since PopupController will create its own PopupView with @StateObject ClipboardInfo.",
        "file": "ClipAI/ClipAIApp.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase4-003",
        "name": "Update ContentView if needed",
        "description": "Review and update ContentView to ensure compatibility with the new simplified architecture.",
        "file": "ClipAI/ContentView.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase5-001",
        "name": "Remove ClipboardStore.swift",
        "description": "Delete the ClipboardStore.swift file as it's replaced by ClipboardInfo with much simpler implementation.",
        "file": "ClipAI/Model/ClipboardStore.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase5-002", 
        "name": "Remove PopupViewModel.swift",
        "description": "Delete the PopupViewModel.swift file as its functionality is now handled by ClipboardInfo and local view state.",
        "file": "ClipAI/ViewModels/PopupViewModel.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase5-003",
        "name": "Update unit tests for ClipboardInfo",
        "description": "Rename and update ClipboardStoreTests.swift to ClipboardInfoTests.swift, updating test cases to use ClipboardInfo instead of ClipboardStore.",
        "file": "ClipAITests/ClipboardStoreTests.swift -> ClipAITests/ClipboardInfoTests.swift",
        "status": "pending"
      },
      {
        "id": "cr-phase5-004",
        "name": "Add new test cases for integrated functionality",
        "description": "Add test cases for async storage operations, search filtering with selection validation, and keyboard navigation with search active.",
        "file": "ClipAITests/ClipboardInfoTests.swift",
        "status": "pending"
      },
      {
        "id": "cr-validation-001",
        "name": "Verify functionality parity",
        "description": "Test that all existing functionality works: clipboard monitoring, item storage, search filtering, keyboard navigation, persistence.",
        "file": "Manual testing",
        "status": "pending"
      },
      {
        "id": "cr-validation-002",
        "name": "Performance testing",
        "description": "Verify that the simplified architecture has equal or better performance compared to the previous dual-layer approach.",
        "file": "Performance testing",
        "status": "pending"  
      },
      {
        "id": "cr-validation-003",
        "name": "Clean up any remaining references",
        "description": "Search codebase for any remaining references to ClipboardStore or PopupViewModel and update them to use ClipboardInfo.",
        "file": "Codebase-wide cleanup",
        "status": "pending"
      }
    ],
    "current_task": "cr-phase2-001",
    "last_updated": "2025-01-23T16:45:00Z"
  },
  "search_bar": {
    "tasks": [
      {
        "id": "sb-view-001",
        "name": "Create SearchBarView component",
        "description": "Build SearchBarView bridging NSSearchField to SwiftUI and auto-focus on appear.",
        "file": "ClipAI/Views/SearchBarView.swift",
        "status": "completed"
      },
      {
        "id": "sb-vm-001",
        "name": "Add searchText state to PopupViewModel",
        "description": "Add @Published searchText and filteredItems computed property.",
        "file": "ClipAI/ViewModels/PopupViewModel.swift",
        "status": "completed"
      },
      {
        "id": "sb-popup-001",
        "name": "Integrate SearchBar into PopupView",
        "description": "Embed SearchBarView in PopupView layout with state binding.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "completed"
      },
      {
        "id": "sb-keyboard-001",
        "name": "Adapt keyboard navigation to filtered list",
        "description": "Update keyboard navigation logic to operate on filteredItems.",
        "file": "ClipAI/Views/PopupView.swift",
        "status": "pending"
      },
      {
        "id": "sb-tests-001",
        "name": "Unit tests for filtering and escape behaviour",
        "description": "Write XCTest covering filteredItems output and escape key handling.",
        "file": "ClipAITests/PopupViewModelTests.swift",
        "status": "pending"
      },
      {
        "id": "sb-ui-001",
        "name": "UI tests for popup search filtering",
        "description": "Add UI tests verifying filtering reduces rows and copy still works.",
        "file": "ClipAIUITests/ClipAIUITests.swift",
        "status": "pending"
      },
      {
        "id": "sb-docs-001",
        "name": "Update documentation and screenshots",
        "description": "Refresh README/docs with new search feature and add screenshots.",
        "file": "docs/search_bar_plan.md",
        "status": "pending"
      }
    ],
    "current_task": null,
    "last_updated": "2025-07-31T16:00:00Z"
  }
}