{
  "llm_integration": {
    "description": "Ask AI feature implementation with multi-provider LLM support",
    "tasks": [
      {
        "id": "llm_001",
        "name": "Setup Dependencies - MacPaw/OpenAI SDK",
        "description": "Integrate MacPaw/OpenAI SDK and KeychainSwift for secure API key storage. Update Package.swift and project configuration.",
        "files": [
          "ClipAI.xcodeproj/project.pbxproj",
          "ClipAI.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"
        ],
        "status": "completed",
        "sprint": 0,
        "dependencies": [],
        "acceptance_criteria": [
          "MacPaw/OpenAI SDK successfully integrated",
          "KeychainSwift dependency added",
          "Project builds without errors"
        ]
      },
      {
        "id": "llm_002",
        "name": "Create LLMProvider Protocol",
        "description": "Define the core LLMProvider protocol with id, displayName, and send method for provider abstraction.",
        "files": [
          "ClipAI/Services/LLMProvider.swift"
        ],
        "status": "completed",
        "sprint": 1,
        "dependencies": ["llm_001"],
        "acceptance_criteria": [
          "LLMProvider protocol defined with required methods",
          "Protocol supports async/await pattern",
          "Generic enough for multiple providers"
        ]
      },
      {
        "id": "llm_003",
        "name": "Create SystemPrompt Model",
        "description": "Implement SystemPrompt struct with id, title, template properties and Codable conformance.",
        "files": [
          "ClipAI/Model/SystemPrompt.swift"
        ],
        "status": "completed",
        "sprint": 1,
        "dependencies": [],
        "acceptance_criteria": [
          "SystemPrompt struct with required properties",
          "Codable conformance for persistence",
          "Template substitution support for {input} placeholder"
        ]
      },
      {
        "id": "llm_004",
        "name": "Create LLMError Enum",
        "description": "Define unified error handling enum for all provider-specific errors (quotaExceeded, invalidKey, network, unknown).",
        "files": [
          "ClipAI/Model/LLMError.swift"
        ],
        "status": "completed",
        "sprint": 1,
        "dependencies": [],
        "acceptance_criteria": [
          "LLMError enum with all required cases",
          "Error mapping from provider-specific errors",
          "User-friendly error descriptions"
        ]
      },
      {
        "id": "llm_005",
        "name": "Create LLMRequestManager",
        "description": "Implement request manager for in-flight task tracking, throttling, and retry logic.",
        "files": [
          "ClipAI/Services/LLMRequestManager.swift"
        ],
        "status": "completed",
        "sprint": 1,
        "dependencies": ["llm_002", "llm_004"],
        "acceptance_criteria": [
          "Manages concurrent LLM requests",
          "Implements rate limiting and throttling",
          "Provides retry logic with exponential backoff",
          "Thread-safe request handling"
        ]
      },
      {
        "id": "llm_006",
        "name": "Create Mock LLM Provider",
        "description": "Implement LLMProviderMock for unit testing with configurable responses and delays.",
        "files": [
          "ClipAITests/Mocks/LLMProviderMock.swift"
        ],
        "status": "skip",
        "sprint": 1,
        "dependencies": ["llm_002"],
        "acceptance_criteria": [
          "Mock provider implements LLMProvider protocol",
          "Configurable response text and delays",
          "Can simulate errors for testing"
        ]
      },
      {
        "id": "llm_007",
        "name": "Write Core LLM Unit Tests",
        "description": "Create comprehensive unit tests for LLMProvider protocol, SystemPrompt, and LLMRequestManager.",
        "files": [
          "ClipAITests/LLMProviderTests.swift",
          "ClipAITests/SystemPromptTests.swift",
          "ClipAITests/LLMRequestManagerTests.swift"
        ],
        "status": "skip",
        "sprint": 1,
        "dependencies": ["llm_002", "llm_003", "llm_005", "llm_006"],
        "acceptance_criteria": [
          "Test coverage >90% for core LLM components",
          "Mock provider integration tests",
          "Error handling test scenarios"
        ]
      },
      {
        "id": "llm_008",
        "name": "Implement MacPawOpenAIProvider",
        "description": "Create concrete implementation of LLMProvider using MacPaw/OpenAI SDK with support for multiple models.",
        "files": [
          "ClipAI/Services/Providers/MacPawOpenAIProvider.swift"
        ],
        "status": "completed",
        "sprint": 2,
        "dependencies": ["llm_001", "llm_002"],
        "acceptance_criteria": [
          "MacPawOpenAIProvider implements LLMProvider protocol",
          "Supports OpenAI GPT models (gpt-4o, gpt-4-turbo, gpt-3.5-turbo)",
          "Proper error handling and mapping to LLMError",
          "Configurable model selection"
        ]
      },
      {
        "id": "llm_009",
        "name": "Create Keychain Service",
        "description": "Implement secure API key storage using KeychainSwift wrapper with provider-specific key management.",
        "files": [
          "ClipAI/Services/KeychainService.swift"
        ],
        "status": "completed",
        "sprint": 2,
        "dependencies": ["llm_001"],
        "acceptance_criteria": [
          "Secure storage/retrieval of API keys per provider",
          "KeychainSwift integration",
          "Key validation and error handling"
        ]
      },
      {
        "id": "llm_010",
        "name": "Create PromptStore",
        "description": "Implement persistence layer for SystemPrompt management with default prompts and user-added prompts.",
        "files": [
          "ClipAI/Services/PromptStore.swift",
          "ClipAI/Resources/default_prompts.json"
        ],
        "status": "completed",
        "sprint": 2,
        "dependencies": ["llm_003"],
        "acceptance_criteria": [
          "Load default prompts from bundle",
          "Persist user prompts to Application Support directory",
          "CRUD operations for SystemPrompt objects",
          "JSON serialization/deserialization"
        ]
      },
      {
        "id": "llm_011",
        "name": "Create Settings UI for API Keys",
        "description": "Add settings window tab for API key entry per provider with validation and secure storage.",
        "files": [
          "ClipAI/Views/Settings/LLMSettingsView.swift",
          "ClipAI/ViewModels/LLMSettingsViewModel.swift",
          "ClipAI/Controllers/LLMSettingsWindowController.swift",
          "ClipAI/ClipAIApp.swift"
        ],
        "status": "completed",
        "sprint": 2,
        "dependencies": ["llm_008", "llm_009"],
        "acceptance_criteria": [
          "Settings UI for API key management",
          "Provider selection and configuration",
          "Key validation feedback",
          "Secure key storage integration"
        ]
      },
      {
        "id": "llm_012",
        "name": "Add Ask AI Button to ClipItemRowView",
        "description": "Add hover-triggered Ask AI button to each clipboard item row with fade-in animation.",
        "files": [
          "ClipAI/Views/ClipItemRowView.swift"
        ],
        "status": "completed",
        "sprint": 3,
        "dependencies": ["llm_008"],
        "acceptance_criteria": [
          "Ask AI button appears on row hover",
          "Smooth fade-in animation (120ms)",
          "Button triggers LLM request flow",
          "Button disabled when no API keys configured"
        ]
      },
      {
        "id": "llm_013",
        "name": "Create LLM Request Modal Sheet",
        "description": "Implement modal sheet for provider selection, prompt selection, and request submission.",
        "files": [
          "ClipAI/Views/LLMRequestView.swift",
          "ClipAI/ViewModels/LLMRequestViewModel.swift"
        ],
        "status": "completed",
        "sprint": 3,
        "dependencies": ["llm_010", "llm_012"],
        "acceptance_criteria": [
          "Modal sheet with provider picker",
          "System prompt dropdown selection",
          "Send button with keyboard shortcut (⌘⏎)",
          "Progress indicator during request",
          "Keyboard navigation (↑/↓ for prompts)"
        ]
      },
      {
        "id": "llm_014",
        "name": "Integrate LLM Results in Preview Pane",
        "description": "Display LLM responses in the existing PreviewWindowView with selectable/copyable text.",
        "files": [
          "ClipAI/Views/Preview/LLMResponsePreviewView.swift",
          "ClipAI/Views/Preview/PreviewWindowView.swift"
        ],
        "status": "pending",
        "sprint": 3,
        "dependencies": ["llm_013"],
        "acceptance_criteria": [
          "LLM responses shown in preview pane",
          "Text is selectable and copyable",
          "Loading state with spinner indicator",
          "Error display with retry option",
          "Proper text formatting and layout"
        ]
      },
      {
        "id": "llm_015",
        "name": "Update PopupViewModel for LLM Integration",
        "description": "Extend PopupViewModel to handle LLM requests, state management, and error handling.",
        "files": [
          "ClipAI/ViewModels/PopupViewModel.swift"
        ],
        "status": "pending",
        "sprint": 3,
        "dependencies": ["llm_005", "llm_014"],
        "acceptance_criteria": [
          "LLM request state management (@Published properties)",
          "Error handling and user feedback",
          "Integration with LLMRequestManager",
          "Non-blocking UI operations (background tasks)"
        ]
      },
      {
        "id": "llm_016",
        "name": "Add Multi-Provider Support - Gemini",
        "description": "Implement Gemini provider using MacPaw/OpenAI SDK with custom configuration for Google's API.",
        "files": [
          "ClipAI/Services/Providers/GeminiProvider.swift"
        ],
        "status": "pending",
        "sprint": 4,
        "dependencies": ["llm_008"],
        "acceptance_criteria": [
          "GeminiProvider implements LLMProvider protocol",
          "Supports Gemini Pro model",
          "Custom host configuration for Google API",
          "Proper error handling specific to Gemini"
        ]
      },
      {
        "id": "llm_017",
        "name": "Add Multi-Provider Support - Claude",
        "description": "Implement Claude provider using MacPaw/OpenAI SDK or direct Anthropic SDK integration.",
        "files": [
          "ClipAI/Services/Providers/ClaudeProvider.swift"
        ],
        "status": "pending",
        "sprint": 4,
        "dependencies": ["llm_008"],
        "acceptance_criteria": [
          "ClaudeProvider implements LLMProvider protocol",
          "Supports Claude models",
          "Anthropic API integration",
          "Claude-specific rate limiting and error handling"
        ]
      },
      {
        "id": "llm_018",
        "name": "Create Provider Registry",
        "description": "Implement centralized provider registry for managing multiple LLM providers and their availability.",
        "files": [
          "ClipAI/Services/LLMProviderRegistry.swift"
        ],
        "status": "completed",
        "sprint": 4,
        "dependencies": ["llm_016", "llm_017"],
        "acceptance_criteria": [
          "Registry manages all available providers",
          "Provider availability based on API key configuration",
          "Default provider selection logic",
          "Provider capability detection"
        ]
      },
      {
        "id": "llm_019",
        "name": "Update Settings for Multiple Providers",
        "description": "Extend settings UI to support multiple providers with individual API key management.",
        "files": [
          "ClipAI/Views/Settings/LLMSettingsView.swift",
          "ClipAI/ViewModels/LLMSettingsViewModel.swift"
        ],
        "status": "completed",
        "sprint": 4,
        "dependencies": ["llm_011", "llm_018"],
        "acceptance_criteria": [
          "Multi-provider settings interface",
          "Individual API key fields per provider",
          "Provider status indicators",
          "Default provider selection"
        ]
      },
      {
        "id": "llm_020",
        "name": "Create Prompt Templates CRUD UI",
        "description": "Implement user interface for creating, editing, and managing custom system prompts.",
        "files": [
          "ClipAI/Views/Settings/PromptManagementView.swift",
          "ClipAI/ViewModels/PromptManagementViewModel.swift"
        ],
        "status": "pending",
        "sprint": 5,
        "dependencies": ["llm_010"],
        "acceptance_criteria": [
          "Create new custom prompts",
          "Edit existing prompts",
          "Delete user-created prompts (protect defaults)",
          "Preview prompt with sample text",
          "Import/export prompt templates"
        ]
      },
      {
        "id": "llm_021",
        "name": "Implement Prompt Template Variables",
        "description": "Add support for template variables beyond {input} with variable substitution system.",
        "files": [
          "ClipAI/Model/SystemPrompt.swift",
          "ClipAI/Services/PromptTemplateEngine.swift"
        ],
        "status": "pending",
        "sprint": 5,
        "dependencies": ["llm_003"],
        "acceptance_criteria": [
          "Support for multiple template variables",
          "Variable substitution engine",
          "Template validation and error handling",
          "Documentation for available variables"
        ]
      },
      {
        "id": "llm_025",
        "name": "Add Localization Support",
        "description": "Implement localization for all LLM-related UI elements and error messages.",
        "files": [
          "ClipAI/Resources/Localizable.strings",
          "ClipAI/Resources/en.lproj/",
          "ClipAI/Resources/es.lproj/",
          "ClipAI/Resources/fr.lproj/"
        ],
        "status": "pending",
        "sprint": 6,
        "dependencies": ["llm_024"],
        "acceptance_criteria": [
          "All UI text localized",
          "Error messages localized",
          "Support for major languages",
          "RTL language support consideration"
        ]
      },
      {
        "id": "llm_026",
        "name": "Write Integration Tests",
        "description": "Create comprehensive integration tests for end-to-end LLM functionality.",
        "files": [
          "ClipAITests/LLMIntegrationTests.swift",
          "ClipAIUITests/LLMAskUITests.swift"
        ],
        "status": "pending",
        "sprint": 6,
        "dependencies": ["llm_025"],
        "acceptance_criteria": [
          "End-to-end workflow testing",
          "Multi-provider integration tests",
          "UI automation tests",
          "Performance benchmarking tests"
        ]
      },
      {
        "id": "llm_027",
        "name": "Create Documentation",
        "description": "Write comprehensive documentation for LLM feature including user guide and technical documentation.",
        "files": [
          "docs/llm_user_guide.md",
          "docs/llm_technical_docs.md",
          "docs/llm_api_reference.md"
        ],
        "status": "pending",
        "sprint": 6,
        "dependencies": ["llm_026"],
        "acceptance_criteria": [
          "User guide with setup instructions",
          "Technical documentation for developers",
          "API reference documentation",
          "Troubleshooting guide"
        ]
      }
    ],
    "current_task": "llm_013",
    "last_updated": "2025-01-16T20:00:00Z",
    "overall_progress": {
      "total_tasks": 27,
      "completed_tasks": 10,
      "in_progress_tasks": 0,
      "pending_tasks": 17,
      "completion_percentage": 37.0
    },
    "sprint_breakdown": {
      "sprint_0": {
        "name": "Setup & Dependencies",
        "tasks": ["llm_001"],
        "description": "Integrate MacPaw/OpenAI SDK and evaluate KeychainSwift"
      },
      "sprint_1": {
        "name": "Core Abstraction",
        "tasks": ["llm_002", "llm_003", "llm_004", "llm_005", "llm_006", "llm_007"],
        "description": "LLMProvider protocol, manager, mock, and unit tests"
      },
      "sprint_2": {
        "name": "Provider Implementation & Settings",
        "tasks": ["llm_008", "llm_009", "llm_010", "llm_011"],
        "description": "MacPawOpenAIProvider implementation and settings UI for API keys"
      },
      "sprint_3": {
        "name": "UI Integration",
        "tasks": ["llm_012", "llm_013", "llm_014", "llm_015"],
        "description": "Ask AI button, modal sheet, and result preview"
      },
      "sprint_4": {
        "name": "Multi-Provider Support",
        "tasks": ["llm_016", "llm_017", "llm_018", "llm_019"],
        "description": "Gemini, Claude providers and provider management"
      },
      "sprint_5": {
        "name": "Advanced Features",
        "tasks": ["llm_020", "llm_021", "llm_022"],
        "description": "Prompt templates CRUD, variables, and rate limiting"
      },
      "sprint_6": {
        "name": "Polish & Production",
        "tasks": ["llm_023", "llm_024", "llm_025", "llm_026", "llm_027"],
        "description": "Caching, analytics, localization, testing, and documentation"
      }
    }
  }
}